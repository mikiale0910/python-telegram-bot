import requests
import time
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext

# Configuration variables (use caution with sensitive data in production)
TELEGRAM_BOT_TOKEN = "7907825582:AAEu1M2CWCW0gKzLCXYyF7_VK8AFVjq82vs"
WALLET_ADDRESS = "8TZBwhFezG7DdLeDbbhUJ4m1RoQVz1UoxBc4FEGtqYha"
WALLET_API_KEY = "GQGRTPf2Zgw4CKA1muznP3dGfkwLicamEk2WaktiM6APGkRWL8RWVJUdL8CtRYm5r7sATN5yFia5vkqX5kt1ad2"
ALCHEMY_RPC_ENDPOINT = "https://solana-devnet.g.alchemy.com/v2/sSHSjoBwrAZmhlyGb80vOLFbDI3-wNnk"
ALCHEMY_API_KEY = "sSHSjoBwrAZmhlyGb80vOLFbDI3-wNnk"

# Function to get Solana market data from Alchemy
def get_market_data():
    url = f"{ALCHEMY_RPC_ENDPOINT}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

# Function to check trading conditions before a buy
def check_buy_conditions(market_data):
    liquidity = market_data.get("liquidity", 0)
    market_cap = market_data.get("market_cap", 0)
    top_holders = market_data.get("top_holders", 0)
    liquidity_burned = market_data.get("liquidity_burned", 0)
    
    if (
        liquidity >= 50000 and 
        market_cap >= 70000 and 
        top_holders <= 30 and 
        liquidity_burned == 100
    ):
        return True
    return False

# Buy function if market conditions are met
def buy_asset(context: CallbackContext):
    market_data = get_market_data()
    if market_data and check_buy_conditions(market_data):
        volume_drop = market_data.get("volume_drop_percentage", 0)
        if 10 <= volume_drop <= 20:
            context.bot.send_message(chat_id=context.job.chat_id, text="Buying asset based on the volume drop!")
            entry_price = market_data["current_price"]
            return entry_price
    return None

# Take Profit and Stop Loss management function
def manage_trade(context: CallbackContext, entry_price):
    market_data = get_market_data()
    if not market_data:
        return

    current_price = market_data["current_price"]
    volume_growth = market_data.get("volume_growth", 0)
    
    # TP and SL logic
    if current_price >= entry_price * 1.5 and volume_growth:
        context.bot.send_message(chat_id=context.job.chat_id, text="Selling 100% - Price increased 50% above entry.")
    elif current_price >= entry_price * 1.3 and volume_growth:
        context.bot.send_message(chat_id=context.job.chat_id, text="Selling 50% - Price increased 30% above entry.")
    elif current_price >= entry_price * 1.2 and volume_growth:
        context.bot.send_message(chat_id=context.job.chat_id, text="Selling 30% - Price increased 20% above entry.")
    elif current_price <= entry_price * 0.75:
        context.bot.send_message(chat_id=context.job.chat_id, text="Selling 100% - Stop Loss triggered at 25% below entry.")

# Command to start the trading bot
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("Bot started. Awaiting market conditions.")
    entry_price = buy_asset(context)
    context.job_queue.run_repeating(manage_trade, interval=30, first=0, context={'entry_price': entry_price})

# Command to check the wallet balance
async def check_balance(update: Update, context: CallbackContext):
    await update.message.reply_text(f"Checking balance for wallet {WALLET_ADDRESS}")

# Command to stop the bot
async def stop(update: Update, context: CallbackContext):
    await update.message.reply_text("Bot stopped.")
    context.job_queue.stop()

# Command to display market status
async def market_status(update: Update, context: CallbackContext):
    market_data = get_market_data()
    if market_data:
        await update.message.reply_text(f"Market data: {market_data}")

# Command to show trade information
async def trade_info(update: Update, context: CallbackContext):
    await update.message.reply_text("Displaying current trade information.")

# Set up the Telegram bot application
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Register command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("check_balance", check_balance))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("market_status", market_status))
    application.add_handler(CommandHandler("trade_info", trade_info))

    print("Bot is running. Press Ctrl+C to stop.")
    application.run_polling()

if __name__ == "__main__":
    main()
